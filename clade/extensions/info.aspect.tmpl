/*
 * Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * ee the License for the specific language governing permissions and
 * limitations under the License.
 */

around: define(likely(x)) { (x) }

around: define(unlikely(x)) { (x) }

info: execution(static $ $(void)) {
	$fprintf<"$env<CWD>/execution.txt","%s %s signature='%s' %s static\n",$path,$func_name,$signature,$decl_line>
}

info: execution(static $ $(..)) {
	$fprintf<"$env<CWD>/execution.txt","%s %s signature='%s' %s static\n",$path,$func_name,$signature,$decl_line>
}

info: execution($ $(void)) {
	$fprintf<"$env<CWD>/execution.txt","%s %s signature='%s' %s global\n",$path,$func_name,$signature,$decl_line>
}

info: execution($ $(..)) {
	$fprintf<"$env<CWD>/execution.txt","%s %s signature='%s' %s global\n",$path,$func_name,$signature,$decl_line>
}

info: declare_func(static $ $(void)) {
	$fprintf<"$env<CWD>/declare_func.txt","%s %s signature='%s' %s static\n",$path,$func_name,$signature,$decl_line>
}

info: declare_func(static $ $(..)) {
	$fprintf<"$env<CWD>/declare_func.txt","%s %s signature='%s' %s static\n",$path,$func_name,$signature,$decl_line>
}

info: declare_func($ $(void)) {
	$fprintf<"$env<CWD>/declare_func.txt","%s %s signature='%s' %s global\n",$path,$func_name,$signature,$decl_line>
}

info: declare_func($ $(..)) {
	$fprintf<"$env<CWD>/declare_func.txt","%s %s signature='%s' %s global\n",$path,$func_name,$signature,$decl_line>
}

info: expand(__EXPORT_SYMBOL(sym, sec)){
	$fprintf<"$env<CWD>/exported.txt","%s %s\n",$path,$arg_val1>
}

// for i in range(max_args_num)
info: expand($({{ arg_patterns[i] }})) {
	$fprintf<"$env<CWD>/expand.txt","%s %s {{ arg_printf_patterns[i] }}\n",$path,$macro_name,{{ arg_vals[i] }}>
}
// endfor

info: call(static $ $(void)) {
	$fprintf<"$env<CWD>/call.txt","%s %s %s %s %s static\n",$func_context_path,$env<CC_IN_FILE>,$func_context_name,$func_name,$call_line>
}


// for i in range(max_args_num)
info: call(static $ $({{ arg_patterns[i] }})) {
	$fprintf<"$env<CWD>/call.txt","%s %s %s %s %s static {{ arg_printf_patterns[i] }}\n",$func_context_path,$env<CC_IN_FILE>,$func_context_name,$func_name,$call_line,{{ arg_values[i] }}>
}
// endfor

info: call( $ $(void)) {
	$fprintf<"$env<CWD>/call.txt","%s %s %s %s %s global\n",$func_context_path,$env<CC_IN_FILE>,$func_context_name,$func_name,$call_line>
}
// for i in range(max_args_num)
info: call($ $({{ arg_patterns[i] }})) {
	$fprintf<"$env<CWD>/call.txt","%s %s %s %s %s global {{ arg_printf_patterns[i] }}\n",$func_context_path,$env<CC_IN_FILE>,$func_context_name,$func_name,$call_line,{{ arg_values[i] }}>
}
// endfor

info: callp($ $(..)) {
	$fprintf<"$env<CWD>/callp.txt","%s %s %s %s\n",$func_context_path,$func_context_name,$func_ptr_name,$call_line>
}

info: use_func($ $(..)) {
	$fprintf<"$env<CWD>/use_func.txt","%s %s %s %s\n",$func_context_path,$func_context_name,$func_name,$use_line>
}

info: use_var($ $) {
	$fprintf<"$env<CWD>/use_var.txt","%s %s %s %s\n",$func_context_path,$func_context_name,$var_name,$use_line>
}

info: init_global(static $ $){
	$fprintf<"$env<CWD>/init_global.txt","declaration: %s path: %s; type: static\n%s",$signature,$env<CC_IN_FILE>,$var_init_list>
}

info: init_global($ $){
	$fprintf<"$env<CWD>/init_global.txt","declaration: %s path: %s; type: global\n%s",$signature,$env<CC_IN_FILE>,$var_init_list>
}

info: introduce($ $) {
	$fprintf<"$env<CWD>/typedefs.txt","declaration: %s path: %s\n",$signature,$env<CC_IN_FILE>>
}
